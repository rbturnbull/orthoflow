===========================
Contributing
===========================

Code in this repository will be formatted with Snakefmt (https://github.com/snakemake/snakefmt).

Proposed Coding Guidelines
===========================

These practices are subject to change based on the decisions of the team.

- Structure the files according to the snakemake documentation (https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html)
- Follow the Best Practices guidelines in the snakemake documentation (https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html)
- Paths in ``input`` and ``output`` in rules are relative to the current working directory so that the user can specify a directory to snakemake with 
- Use clear and explicit variable names. (e.g. ``wildcards`` is better than merely ``w``)
- Reference params by keyword even if only one parameter is used in a rule (i.e. ``{params.taxon}`` instead of merely ``{params}``).
- For Python scripts, do not use the ``snakemake`` local variable but pass information to the script via a commandline interface using typer and call the script with a shell command (e.g. ``shell("python SCRIPT_DIR/<script name>.py ..."``).
- Place the ``output`` of a rule above the ``input`` because snakemake goes from output to input when creating the DAG.

Testing
-------

- Tests must be added for any new rules before merging to the ``master`` branch. 
- All tests must be passing before merging with the ``master`` branch.
- Tests should be placed in the ``tests`` directory of the root of the repository (NB. not in `.tests` which is the default snakemake testing directory)
- Tests can be autogenerated using ``snakemake -c1 --directory test-data/ --conda-frontend conda --use-conda --generate-unit-tests $(pwd)/tests/unit``.
- Tests are automatically included in the CI/CD pipeline using Github actions.
- More info on testing with https://snakemake.readthedocs.io/en/stable/snakefiles/testing.html).

Documentation
-------------

- Docstrings for Python functions should use the Google docstring convention (https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings)
- Add docstrings should be added to each rule (conventions are still to be decided).
- Citations for dependencies or research used in any rule should be added in bibtex format to ``docs/references.bib``.
- Documentation generated using sphinx and automatically deployed as part of the CI/CD pipeline.
- Should each module in the workflow should have its own page in the documentation?
- Docs should be written in reStructuredText.
- Each submodule corresponds to a page in the documentation and added to the table of contents tree (i.e. ``toctree``) in the ``index.rst`` file.

Files need to start with a heading for the section. The convention used here is to use the equals sign above and below the heading::

    ===============
    Section Heading
    ===============

Subsections also use an equals sign but just below the heading::

    Subsection Heading
    ==================

Subsubsections have a single dash below the heading::

    Subsubsection Heading
    ---------------------

Try not to have any other sections within this but if it is necessary, use tildas below the heading::

    Further Subsection Headings
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~

Other information for using reStructuredText in Sphinx can be found here: https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#rst-primer and https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html.



