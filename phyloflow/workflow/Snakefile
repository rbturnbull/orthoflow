from snakemake.utils import min_version
from pathlib import Path
import subprocess

min_version("6.0")

SNAKE_DIR = Path(workflow.basedir)
SCRIPT_DIR = SNAKE_DIR/ "scripts"
WORKFLOW_DIR = SNAKE_DIR / "workflow"
ENV_DIR = WORKFLOW_DIR.parent / "envs"
CONFIG_DIR = SNAKE_DIR.parent / "config"
LOG_DIR = SNAKE_DIR.parent / "logs"


# Get the path to the default config file.
# This can be overridden on the command line
configfile: CONFIG_DIR / "config.yml"

report: "report/workflow.rst"


##### load rules #####
include: "rules/intake.smk"
include: "rules/orthofisher.smk"
include: "rules/orthofinder.smk"
include: "rules/alignment.smk"
include: "rules/supermatrix.smk"
# include: "rules/genetree.smk"
# include: "rules/reconciliation.smk"


onstart:
    # Print some environment info
    print("Workflow directories:")
    path_vars = (
        'SNAKE_DIR',
        'SCRIPT_DIR',
        'CONFIG_DIR',
        'LOG_DIR',
    )
    for name in path_vars:
        print(f"\t{name:20s} ➡  {str(globals()[name])}")

    print("Environment:")
    shell = lambda cmd: subprocess.run(cmd, shell=True, stdout=subprocess.PIPE).stdout.decode().rstrip()
    print(f"\t{shell('python --version'):20s} ➡  {shell('which python')}")
    print(f"\t{shell('conda --version'):20s} ➡  {shell('which conda')}")
    print(f"\t{' '.join(('snakemake', shell('snakemake --version'))):20s} ➡  {shell('which snakemake')}")

    # Ensure all required directories exist
    for name in path_vars:
        globals()[name].mkdir(exist_ok=True)
        assert globals()[name].exists()


rule all:
    input:
        "results/supermatrix/render_tree.svg",
        "results/supermatrix/alignment_summary.txt",
        "results/supermatrix/ascii_tree.txt",