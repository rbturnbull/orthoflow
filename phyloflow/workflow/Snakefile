from snakemake.utils import min_version
from pathlib import Path

import subprocess

min_version("6.0")

SNAKE_DIR = Path(workflow.basedir)
SCRIPT_DIR = SNAKE_DIR/ "scripts"
WORKFLOW_DIR = SNAKE_DIR / "workflow"
ENV_DIR = WORKFLOW_DIR.parent / "envs"
CONFIG_DIR = SNAKE_DIR.parent / "config"
LOG_DIR = SNAKE_DIR.parent / "logs"

# Defaults for config
ORTHOLOG_MIN_SEQS_DEFAULT = 5
MINIMUM_TRIMMED_ALIGNMENT_LENGTH_CDS_DEFAULT = 501
MINIMUM_TRIMMED_ALIGNMENT_LENGTH_PROTEINS_DEFAULT = 167
MAX_TRIMMED_PROPORTION_DEFAULT = 0.5
INFER_TREE_WITH_PROTEIN_SEQS_DEFAULT = True
USE_ORTHOFISHER_DEFAULT = False
BOOTSTRAP_STRING_DEFAULT = "-bb 1000"
MODEL_STRING_DEFAULT = "-m TEST"
SUPERMATRIX_OUTGROUP_DEFAULT = ""

# Get the path to the default config file.
# This can be overridden on the command line
configfile: CONFIG_DIR / "config.yml"

report: "report/workflow.rst"


##### load rules #####
include: "rules/intake.smk"
include: "rules/orthofisher.smk"
include: "rules/orthofinder.smk"
include: "rules/alignment.smk"
include: "rules/supermatrix.smk"
include: "rules/gene_tree.smk"
include: "rules/supertree.smk"


onstart:
    # Print some environment info
    print("Workflow directories:")
    path_vars = (
        'SNAKE_DIR',
        'SCRIPT_DIR',
        'CONFIG_DIR',
        'LOG_DIR',
    )
    for name in path_vars:
        print(f"\t{name:20s} ➡  {str(globals()[name])}")

    print("Environment:")
    shell = lambda cmd: subprocess.run(cmd, shell=True, stdout=subprocess.PIPE).stdout.decode().rstrip()
    print(f"\t{shell('python --version'):20s} ➡  {shell('which python')}")
    print(f"\t{shell('conda --version'):20s} ➡  {shell('which conda')}")
    print(f"\t{' '.join(('snakemake', shell('snakemake --version'))):20s} ➡  {shell('which snakemake')}")

    # Ensure all required directories exist
    for name in path_vars:
        globals()[name].mkdir(exist_ok=True)
        assert globals()[name].exists()


def get_all_outputs():
    outputs = []
    if config.get("supermatrix", True):
        outputs += [
            rules.supermatrix_alignment_summary.output,
            rules.supermatrix_ascii.output,
            rules.supermatrix_render.output.svg,
        ]
    if config.get("supertree", True):
        outputs += [
            rules.supertree_ascii.output,
            rules.supertree_render.output.svg,
        ]
    return outputs


rule all:
    input: get_all_outputs()
